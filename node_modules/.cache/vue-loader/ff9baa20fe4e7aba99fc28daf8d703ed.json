{"remainingRequest":"/Users/rige/Desktop/Workbench/github/rms/rms_web_vue/node_modules/_vue-loader@15.7.1@vue-loader/lib/index.js??vue-loader-options!/Users/rige/Desktop/Workbench/github/rms/rms_web_vue/src/components/Chart/Chart.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/rige/Desktop/Workbench/github/rms/rms_web_vue/src/components/Chart/Chart.vue","mtime":1571649655079},{"path":"/Users/rige/Desktop/Workbench/github/rms/rms_web_vue/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/rige/Desktop/Workbench/github/rms/rms_web_vue/node_modules/_babel-loader@8.0.6@babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/rige/Desktop/Workbench/github/rms/rms_web_vue/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/rige/Desktop/Workbench/github/rms/rms_web_vue/node_modules/_vue-loader@15.7.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n\nimport G2 from '@antv/g2';\nimport Component from '@/utils/component';\n\nlet barTypes = ['line', 'bar', 'area', 'pie', 'ring'],\n    padding = [16, 16, 32, 40],\n    simplePadding = [4, 0, 0, 0];\n\nexport default {\n    name: \"Chart\",\n    props: {\n        group: {\n            type: Boolean,\n            default: false\n        },\n        simple: {\n            type: Boolean,\n            default: false\n        },\n        x: {\n            type: String\n        },\n        y: {\n            type: String\n        },\n        dataSource: {\n            type: Array,\n            required: true,\n            default() {\n                return [];\n            }\n        },\n        minValue: {\n            type: Number\n        },\n        maxValue: {\n            type: Number\n        },\n        name: {\n            type: String,\n        },\n        color: {\n            type: Array,\n            default() {\n                return ['#1890ff', '#d1e9ff', '#ced4d9', '#f0f2f3'];\n            }\n        },\n        forceFit: {\n            type: Boolean,\n            default: true\n        },\n        animate: {\n            type: Boolean,\n            default: true\n        },\n        theme: {\n            type: String,\n            default: 'default'\n        },\n        width: {\n            type: [Number, String],\n            default: '100%'\n        },\n        height: {\n            type: [Number, String],\n            default: 256\n        },\n        padding: {\n            type: [Number, Array],\n            default() {\n                return padding;\n            }\n        },\n        type: {\n            type: String,\n            required: true,\n            validator(value) {\n                return Component.isExist(value, barTypes)\n            }\n        }\n    },\n    data() {\n        return {\n            chart: null\n        }\n    },\n    mounted() {\n        this.render();\n    },\n    methods: {\n        getChart() {\n            let chart = new G2.Chart({\n                container: this.$refs.chart,\n                forceFit: this.forceFit,\n                height: this.height,\n                padding: this.simple ? simplePadding : this.padding,\n                theme: this.theme,\n                animate: this.animate\n            });\n\n            chart.source(this.dataSource);\n\n            if (this.simple) chart.axis(false);\n            else chart.axis(`${this.y}`, {\n                label: {\n                    formatter: (value) => {\n                        if (value > 10000) return (value / 1000).toFixed(0) + 'k';\n                        else return value;\n                    }\n                }\n            });\n\n            this.chart = chart;\n            return chart;\n        },\n        render() {\n            switch (this.type) {\n                case 'line':\n                    break;\n                case 'bar':\n                    this.renderBarChart();\n                    break;\n                case 'area':\n                    this.renderAreaChart();\n                    break;\n                case 'pie':\n                    break;\n                case 'ring':\n                    this.renderRingChart();\n                    break;\n                default:\n                    break;\n            }\n        },\n        renderAreaChart() {\n            let chart = this.getChart();\n            chart.scale({\n                [`${this.y}`]: {\n                    min: this.minValue,\n                    max: this.maxValue\n                },\n                [`${this.x}`]: {\n                    range: [0, 1]\n                }\n            });\n            chart.area().position(`${this.x}*${this.y}`).shape('smooth').color('#975fe4');\n            chart.line().position(`${this.x}*${this.y}`).shape('smooth').color('#975fe4');\n            chart.render();\n        },\n        renderBarChart() {\n            let chart = this.getChart();\n            if (this.group) chart.interval().position(`${this.x}*${this.y}`).color(this.name, this.color).adjust([{\n                type: 'dodge',\n                marginRatio: 1 / 32\n            }]);\n            else chart.interval().position(`${this.x}*${this.y}`);\n            chart.render();\n        },\n        renderRingChart() {\n            let chart = this.getChart();\n\n            chart.coord('theta', {\n                radius: 1,\n                innerRadius: 0.7\n            });\n            chart.legend('item', {\n                position: 'right-center',\n            });\n            chart.tooltip({\n                showTitle: false,\n                itemTpl: '<li><span style=\"background-color:{color};\" class=\"g2-tooltip-marker\"></span>{name}: {value}</li>'\n            });\n            //  辅助文本\n            chart.guide().html({\n                position: ['50%', '50%'],\n                html: `\n                    <div style=\"color:#8c8c8c;font-size: 14px;text-align: center;\">\n                        销售额\n                        <br>\n                        <span style=\"font-size:24px\">¥ 15,781</span>\n                    </div>\n                `,\n                alignX: 'middle',\n                alignY: 'middle'\n            });\n\n            chart.intervalStack().position('percent').color('item')\n                .tooltip('item*percent', (item, percent) => {\n                    percent = percent * 100 + '%';\n                    return {\n                        name: item,\n                        value: percent\n                    };\n                })\n                .style({\n                    lineWidth: 4,\n                    stroke: '#fff'\n                });\n            chart.render();\n        }\n    },\n    watch: {\n        x() {\n            this.chart.render();\n        },\n        y() {\n            this.chart.render();\n        },\n        dataSource: {\n            handler() {\n                // 重绘图表\n                this.chart.repaint();\n            },\n            deep: true\n        },\n        color() {\n            this.chart.render();\n        },\n        name() {\n            this.chart.render();\n        },\n    }\n}\n",{"version":3,"sources":["Chart.vue"],"names":[],"mappings":";;;;;AAKA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Chart.vue","sourceRoot":"src/components/Chart","sourcesContent":["<template>\n    <div ref=\"chart\" class=\"chart\"/>\n</template>\n\n<script>\n    import G2 from '@antv/g2';\n    import Component from '@/utils/component';\n\n    let barTypes = ['line', 'bar', 'area', 'pie', 'ring'],\n        padding = [16, 16, 32, 40],\n        simplePadding = [4, 0, 0, 0];\n\n    export default {\n        name: \"Chart\",\n        props: {\n            group: {\n                type: Boolean,\n                default: false\n            },\n            simple: {\n                type: Boolean,\n                default: false\n            },\n            x: {\n                type: String\n            },\n            y: {\n                type: String\n            },\n            dataSource: {\n                type: Array,\n                required: true,\n                default() {\n                    return [];\n                }\n            },\n            minValue: {\n                type: Number\n            },\n            maxValue: {\n                type: Number\n            },\n            name: {\n                type: String,\n            },\n            color: {\n                type: Array,\n                default() {\n                    return ['#1890ff', '#d1e9ff', '#ced4d9', '#f0f2f3'];\n                }\n            },\n            forceFit: {\n                type: Boolean,\n                default: true\n            },\n            animate: {\n                type: Boolean,\n                default: true\n            },\n            theme: {\n                type: String,\n                default: 'default'\n            },\n            width: {\n                type: [Number, String],\n                default: '100%'\n            },\n            height: {\n                type: [Number, String],\n                default: 256\n            },\n            padding: {\n                type: [Number, Array],\n                default() {\n                    return padding;\n                }\n            },\n            type: {\n                type: String,\n                required: true,\n                validator(value) {\n                    return Component.isExist(value, barTypes)\n                }\n            }\n        },\n        data() {\n            return {\n                chart: null\n            }\n        },\n        mounted() {\n            this.render();\n        },\n        methods: {\n            getChart() {\n                let chart = new G2.Chart({\n                    container: this.$refs.chart,\n                    forceFit: this.forceFit,\n                    height: this.height,\n                    padding: this.simple ? simplePadding : this.padding,\n                    theme: this.theme,\n                    animate: this.animate\n                });\n\n                chart.source(this.dataSource);\n\n                if (this.simple) chart.axis(false);\n                else chart.axis(`${this.y}`, {\n                    label: {\n                        formatter: (value) => {\n                            if (value > 10000) return (value / 1000).toFixed(0) + 'k';\n                            else return value;\n                        }\n                    }\n                });\n\n                this.chart = chart;\n                return chart;\n            },\n            render() {\n                switch (this.type) {\n                    case 'line':\n                        break;\n                    case 'bar':\n                        this.renderBarChart();\n                        break;\n                    case 'area':\n                        this.renderAreaChart();\n                        break;\n                    case 'pie':\n                        break;\n                    case 'ring':\n                        this.renderRingChart();\n                        break;\n                    default:\n                        break;\n                }\n            },\n            renderAreaChart() {\n                let chart = this.getChart();\n                chart.scale({\n                    [`${this.y}`]: {\n                        min: this.minValue,\n                        max: this.maxValue\n                    },\n                    [`${this.x}`]: {\n                        range: [0, 1]\n                    }\n                });\n                chart.area().position(`${this.x}*${this.y}`).shape('smooth').color('#975fe4');\n                chart.line().position(`${this.x}*${this.y}`).shape('smooth').color('#975fe4');\n                chart.render();\n            },\n            renderBarChart() {\n                let chart = this.getChart();\n                if (this.group) chart.interval().position(`${this.x}*${this.y}`).color(this.name, this.color).adjust([{\n                    type: 'dodge',\n                    marginRatio: 1 / 32\n                }]);\n                else chart.interval().position(`${this.x}*${this.y}`);\n                chart.render();\n            },\n            renderRingChart() {\n                let chart = this.getChart();\n\n                chart.coord('theta', {\n                    radius: 1,\n                    innerRadius: 0.7\n                });\n                chart.legend('item', {\n                    position: 'right-center',\n                });\n                chart.tooltip({\n                    showTitle: false,\n                    itemTpl: '<li><span style=\"background-color:{color};\" class=\"g2-tooltip-marker\"></span>{name}: {value}</li>'\n                });\n                //  辅助文本\n                chart.guide().html({\n                    position: ['50%', '50%'],\n                    html: `\n                        <div style=\"color:#8c8c8c;font-size: 14px;text-align: center;\">\n                            销售额\n                            <br>\n                            <span style=\"font-size:24px\">¥ 15,781</span>\n                        </div>\n                    `,\n                    alignX: 'middle',\n                    alignY: 'middle'\n                });\n\n                chart.intervalStack().position('percent').color('item')\n                    .tooltip('item*percent', (item, percent) => {\n                        percent = percent * 100 + '%';\n                        return {\n                            name: item,\n                            value: percent\n                        };\n                    })\n                    .style({\n                        lineWidth: 4,\n                        stroke: '#fff'\n                    });\n                chart.render();\n            }\n        },\n        watch: {\n            x() {\n                this.chart.render();\n            },\n            y() {\n                this.chart.render();\n            },\n            dataSource: {\n                handler() {\n                    // 重绘图表\n                    this.chart.repaint();\n                },\n                deep: true\n            },\n            color() {\n                this.chart.render();\n            },\n            name() {\n                this.chart.render();\n            },\n        }\n    }\n</script>\n"]}]}