{"remainingRequest":"/Users/rige/Desktop/Workbench/github/rms/rms_web_vue/node_modules/_vue-loader@15.7.1@vue-loader/lib/index.js??vue-loader-options!/Users/rige/Desktop/Workbench/github/rms/rms_web_vue/src/views/layout/sidebar/Sidebar.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/rige/Desktop/Workbench/github/rms/rms_web_vue/src/views/layout/sidebar/Sidebar.vue","mtime":1568874391686},{"path":"/Users/rige/Desktop/Workbench/github/rms/rms_web_vue/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/rige/Desktop/Workbench/github/rms/rms_web_vue/node_modules/_babel-loader@8.0.6@babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/rige/Desktop/Workbench/github/rms/rms_web_vue/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/rige/Desktop/Workbench/github/rms/rms_web_vue/node_modules/_vue-loader@15.7.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport SystemRoutes from '@/router/routes/system';\nimport SidebarLogo from \"./SidebarLogo\";\nimport SidebarMenu from \"./SidebarMenu\";\nimport {mapState} from 'vuex';\n\nlet routers = [],\n    rootSubmenuKeys = ['/dashboard', '/system', '/account'],\n    localValue = false,\n    inlineCollapsed = true,\n    // menuDataSource = [\n    //     {path: '/workbench', name: '工作台', icon: 'desktop'},\n    //     // {\n    //     //     path: '/dashboard', name: '仪表盘', icon: 'dashboard', children: [\n    //     //         {path: '/dashboard/analysis', name: '数据分析'},\n    //     //         {path: '/dashboard/monitor', name: '系统监控'},\n    //     //     ]\n    //     // }\n    //     {path: '/dashboard', name: '仪表盘', icon: 'dashboard'}\n    // ];\n    menuDataSource = SystemRoutes;\n\nexport default {\n    name: \"Sidebar\",\n    components: {SidebarLogo, SidebarMenu},\n    props: {\n        value: {\n            type: Boolean,\n            default: false\n        },\n        width: {\n            type: [String, Number],\n            default: 256\n        },\n        collapsedWidth: {\n            type: [String, Number],\n            width: 128\n        }\n    },\n    data() {\n        return {\n            localValue,\n            routers,\n            inlineCollapsed,\n            openKeys: [],\n            selectedKeys: [''],\n            rootSubmenuKeys,\n            menuDataSource\n        }\n    },\n    computed: {\n        ...mapState({\n            theme: state => state.setting.theme\n        }),\n        styles() {\n            return {\n                background: this.theme.themeStyle === 'light' ? 'white' : ''\n            }\n        }\n    },\n    mounted() {\n        this.openKeys = [this.$route.matched[1].path];\n        this.selectedKeys = [this.$route.path];\n        this.routers = this.$storage.get('ROUTER');\n    },\n    methods: {\n        bindClickMenu(ev) {\n            const key = ev.key;\n            if (this.selectedKeys.indexOf(key) > -1) return;\n\n            this.selectedKeys = [key];\n            this.$router.push(key);\n        },\n        bindOpenChange(openKeys) {\n            const latestOpenKey = openKeys.find(key => this.openKeys.indexOf(key) === -1);\n            if (this.rootSubmenuKeys.indexOf(latestOpenKey) === -1) this.openKeys = openKeys;\n            else this.openKeys = latestOpenKey ? [latestOpenKey] : [];\n        },\n        bindBreakpoint(value) {\n            this.$emit(\"input\", value);\n        }\n    },\n    watch: {\n        $route(value) {\n            this.selectedKeys = [value.path];\n        },\n        value(value) {\n            this.localValue = value;\n        }\n    }\n}\n",{"version":3,"sources":["Sidebar.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Sidebar.vue","sourceRoot":"src/views/layout/sidebar","sourcesContent":["<template>\n    <a-layout-sider class=\"layout-sidebar\" :width=\"width\" :collapsedWidth=\"collapsedWidth\" :trigger=\"null\" collapsible\n                    v-model=\"localValue\" :style=\"styles\" breakpoint=\"lg\" @breakpoint=\"bindBreakpoint\">\n        <SidebarLogo :collapsed=\"localValue\"/>\n\n        <a-menu :theme=\"theme.themeStyle\"\n                :openKeys=\"openKeys\" :selectedKeys=\"selectedKeys\"\n                :inlineCollapsed=\"inlineCollapsed\"\n                @click=\"bindClickMenu\" @openChange=\"bindOpenChange\"\n                mode=\"inline\" class=\"border-none\">\n            <a-menu-item key=\"/workbench\">\n                <a-icon type=\"desktop\"/>\n                <span>工作台</span>\n            </a-menu-item>\n            <a-sub-menu key=\"/dashboard\">\n                <span slot=\"title\">\n                    <a-icon type=\"dashboard\"/>\n                    <span>仪表盘</span>\n                </span>\n                <a-menu-item key=\"/dashboard/analysis\">数据分析</a-menu-item>\n                <a-menu-item key=\"/dashboard/monitor\">系统监控</a-menu-item>\n            </a-sub-menu>\n            <a-sub-menu key=\"/system\">\n                <span slot=\"title\">\n                    <a-icon type=\"setting\"/>\n                    <span>系统管理</span>\n                </span>\n                <a-menu-item key=\"/system/user\">用户管理</a-menu-item>\n                <a-menu-item key=\"/system/role\">角色管理</a-menu-item>\n                <a-menu-item key=\"/system/permission\">权限管理</a-menu-item>\n                <a-menu-item key=\"/system/menu\">菜单管理</a-menu-item>\n            </a-sub-menu>\n        </a-menu>\n        <!---->\n        <!--        <SidebarMenu :data-source=\"menuDataSource\"/>-->\n    </a-layout-sider>\n</template>\n\n<script>\n    import SystemRoutes from '@/router/routes/system';\n    import SidebarLogo from \"./SidebarLogo\";\n    import SidebarMenu from \"./SidebarMenu\";\n    import {mapState} from 'vuex';\n\n    let routers = [],\n        rootSubmenuKeys = ['/dashboard', '/system', '/account'],\n        localValue = false,\n        inlineCollapsed = true,\n        // menuDataSource = [\n        //     {path: '/workbench', name: '工作台', icon: 'desktop'},\n        //     // {\n        //     //     path: '/dashboard', name: '仪表盘', icon: 'dashboard', children: [\n        //     //         {path: '/dashboard/analysis', name: '数据分析'},\n        //     //         {path: '/dashboard/monitor', name: '系统监控'},\n        //     //     ]\n        //     // }\n        //     {path: '/dashboard', name: '仪表盘', icon: 'dashboard'}\n        // ];\n        menuDataSource = SystemRoutes;\n\n    export default {\n        name: \"Sidebar\",\n        components: {SidebarLogo, SidebarMenu},\n        props: {\n            value: {\n                type: Boolean,\n                default: false\n            },\n            width: {\n                type: [String, Number],\n                default: 256\n            },\n            collapsedWidth: {\n                type: [String, Number],\n                width: 128\n            }\n        },\n        data() {\n            return {\n                localValue,\n                routers,\n                inlineCollapsed,\n                openKeys: [],\n                selectedKeys: [''],\n                rootSubmenuKeys,\n                menuDataSource\n            }\n        },\n        computed: {\n            ...mapState({\n                theme: state => state.setting.theme\n            }),\n            styles() {\n                return {\n                    background: this.theme.themeStyle === 'light' ? 'white' : ''\n                }\n            }\n        },\n        mounted() {\n            this.openKeys = [this.$route.matched[1].path];\n            this.selectedKeys = [this.$route.path];\n            this.routers = this.$storage.get('ROUTER');\n        },\n        methods: {\n            bindClickMenu(ev) {\n                const key = ev.key;\n                if (this.selectedKeys.indexOf(key) > -1) return;\n\n                this.selectedKeys = [key];\n                this.$router.push(key);\n            },\n            bindOpenChange(openKeys) {\n                const latestOpenKey = openKeys.find(key => this.openKeys.indexOf(key) === -1);\n                if (this.rootSubmenuKeys.indexOf(latestOpenKey) === -1) this.openKeys = openKeys;\n                else this.openKeys = latestOpenKey ? [latestOpenKey] : [];\n            },\n            bindBreakpoint(value) {\n                this.$emit(\"input\", value);\n            }\n        },\n        watch: {\n            $route(value) {\n                this.selectedKeys = [value.path];\n            },\n            value(value) {\n                this.localValue = value;\n            }\n        }\n    }\n</script>\n"]}]}