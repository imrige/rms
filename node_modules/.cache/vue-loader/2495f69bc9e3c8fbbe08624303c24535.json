{"remainingRequest":"/Users/rige/Desktop/Projects/Github/rms2/rms_web_vue/node_modules/_vue-loader@15.7.1@vue-loader/lib/index.js??vue-loader-options!/Users/rige/Desktop/Projects/Github/rms2/rms_web_vue/src/layouts/header/Header.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/rige/Desktop/Projects/Github/rms2/rms_web_vue/src/layouts/header/Header.vue","mtime":1571899271106},{"path":"/Users/rige/Desktop/Projects/Github/rms2/rms_web_vue/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/rige/Desktop/Projects/Github/rms2/rms_web_vue/node_modules/_babel-loader@8.0.6@babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/rige/Desktop/Projects/Github/rms2/rms_web_vue/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/rige/Desktop/Projects/Github/rms2/rms_web_vue/node_modules/_vue-loader@15.7.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Setting from '@/layouts/mixin';\nimport Menu from \"@/layouts/menu/Menu\";\nimport Brand from \"@/layouts/brand/Brand\";\nimport HeaderAvatar from \"./HeaderAvatar\";\nimport HeaderNotification from \"./HeaderNotification\";\nimport HeaderSetting from \"./HeaderSetting\";\nimport HeaderSearch from \"./HeaderSearch\";\nimport {mapState, mapMutations} from 'vuex';\n\nexport default {\n    name: \"Header\",\n    components: {HeaderAvatar, HeaderNotification, HeaderSetting, HeaderSearch, Brand, Menu},\n    mixins: [Setting],\n    props: {\n        value: {\n            type: Boolean,\n            default: false\n        }\n    },\n    data() {\n        return {\n            showSetting: false,\n            showSearch: false,\n        }\n    },\n    computed: {\n        ...mapState({\n            user: state => state.account.user,\n            theme: state => state.setting.theme\n        }),\n        triggerStyles() {\n            let {collapsed} = this.theme;\n\n            return {\n                transform: `rotate(${collapsed ? 180 : 0}deg)`,\n            }\n        }\n    },\n    methods: {\n        ...mapMutations({\n            setTheme: \"setting/setTheme\"\n        }),\n        bindClickCollapsed() {\n            let {collapsed} = this.theme;\n            this.theme.collapsed = !collapsed;\n            this.setTheme(this.theme);\n        }\n    }\n}\n",{"version":3,"sources":["Header.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Header.vue","sourceRoot":"src/layouts/header","sourcesContent":["<template>\n    <a-layout-header>\n        <div class=\"ant-layout-header-wrapper\">\n            <template v-if=\"isSideLayout\">\n                <span class=\"ant-layout-header-trigger\" @click=\"bindClickCollapsed\">\n                    <a-icon type=\"menu-fold\" :style=\"triggerStyles\"/>\n                </span>\n            </template>\n\n            <Brand v-if=\"isTopLayout\"/>\n\n            <Menu v-if=\"isTopLayout\"/>\n\n            <div class=\"ant-layout-header-actions\">\n                <a-tooltip placement=\"bottom\" title=\"全站搜索\">\n                    <span class=\"ant-layout-header-action\" @click=\"showSearch = true\">\n                        <a-icon type=\"search\"/>\n                        <HeaderSearch v-model=\"showSearch\"/>\n                    </span>\n                </a-tooltip>\n                <a-tooltip placement=\"bottom\" title=\"使用帮助\">\n                    <span class=\"ant-layout-header-action\">\n                        <a-icon type=\"question-circle\"/>\n                    </span>\n                </a-tooltip>\n                <a-popover placement=\"bottomRight\" trigger=\"click\" :overlayStyle=\"{width: '340px', padding: 0}\">\n                    <span class=\"ant-layout-header-action\">\n                        <a-badge count=\"9\">\n                            <a-icon type=\"bell\"/>\n                        </a-badge>\n                    </span>\n                    <HeaderNotification slot=\"content\"/>\n                </a-popover>\n                <span class=\"ant-layout-header-action\">\n                    <HeaderAvatar :user=\"user\"/>\n                </span>\n                <span class=\"ant-layout-header-action\" @click=\"showSetting = true\">\n                    <a-icon type=\"setting\"/>\n                    <HeaderSetting v-model=\"showSetting\"/>\n                </span>\n            </div>\n        </div>\n    </a-layout-header>\n</template>\n\n<script>\n    import Setting from '@/layouts/mixin';\n    import Menu from \"@/layouts/menu/Menu\";\n    import Brand from \"@/layouts/brand/Brand\";\n    import HeaderAvatar from \"./HeaderAvatar\";\n    import HeaderNotification from \"./HeaderNotification\";\n    import HeaderSetting from \"./HeaderSetting\";\n    import HeaderSearch from \"./HeaderSearch\";\n    import {mapState, mapMutations} from 'vuex';\n\n    export default {\n        name: \"Header\",\n        components: {HeaderAvatar, HeaderNotification, HeaderSetting, HeaderSearch, Brand, Menu},\n        mixins: [Setting],\n        props: {\n            value: {\n                type: Boolean,\n                default: false\n            }\n        },\n        data() {\n            return {\n                showSetting: false,\n                showSearch: false,\n            }\n        },\n        computed: {\n            ...mapState({\n                user: state => state.account.user,\n                theme: state => state.setting.theme\n            }),\n            triggerStyles() {\n                let {collapsed} = this.theme;\n\n                return {\n                    transform: `rotate(${collapsed ? 180 : 0}deg)`,\n                }\n            }\n        },\n        methods: {\n            ...mapMutations({\n                setTheme: \"setting/setTheme\"\n            }),\n            bindClickCollapsed() {\n                let {collapsed} = this.theme;\n                this.theme.collapsed = !collapsed;\n                this.setTheme(this.theme);\n            }\n        }\n    }\n</script>\n"]}]}