{"remainingRequest":"/Users/rige/Desktop/Workbench/github/rms/rms_web_vue/node_modules/_vue-loader@15.7.1@vue-loader/lib/index.js??vue-loader-options!/Users/rige/Desktop/Workbench/github/rms/rms_web_vue/src/layouts/sidebar/Sidebar.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/rige/Desktop/Workbench/github/rms/rms_web_vue/src/layouts/sidebar/Sidebar.vue","mtime":1571277407634},{"path":"/Users/rige/Desktop/Workbench/github/rms/rms_web_vue/node_modules/_babel-loader@8.0.6@babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/rige/Desktop/Workbench/github/rms/rms_web_vue/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/rige/Desktop/Workbench/github/rms/rms_web_vue/node_modules/_vue-loader@15.7.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Brand from \"@/layouts/brand/Brand\";\nimport Menu from \"@/layouts/menu/Menu\";\nimport {mapState} from 'vuex';\n\nlet routers = [],\n    rootSubmenuKeys = ['/dashboard', '/system', '/account'],\n    localValue = false,\n    inlineCollapsed = true;\n\nexport default {\n    name: \"Sidebar\",\n    components: {Brand, Menu},\n    props: {\n        value: {\n            type: Boolean,\n            default: false\n        },\n        width: {\n            type: [String, Number],\n            default: 256\n        },\n        collapsedWidth: {\n            type: [String, Number],\n            width: 128\n        }\n    },\n    data() {\n        return {\n            localValue,\n            routers,\n            inlineCollapsed,\n            openKeys: [],\n            selectedKeys: [''],\n            rootSubmenuKeys,\n        }\n    },\n    computed: {\n        ...mapState({\n            theme: state => state.setting.theme\n        }),\n        styles() {\n            return {\n                background: this.theme.themeStyle === 'light' ? 'white' : ''\n            }\n        }\n    },\n    mounted() {\n        this.openKeys = [this.$route.matched[1].path];\n        this.selectedKeys = [this.$route.path];\n        this.routers = this.$storage.get('ROUTER');\n    },\n    methods: {\n        bindClickMenu(ev) {\n            const key = ev.key;\n            if (this.selectedKeys.indexOf(key) > -1) return;\n\n            this.selectedKeys = [key];\n            this.$router.push(key);\n        },\n        bindOpenChange(openKeys) {\n            const latestOpenKey = openKeys.find(key => this.openKeys.indexOf(key) === -1);\n            if (this.rootSubmenuKeys.indexOf(latestOpenKey) === -1) this.openKeys = openKeys;\n            else this.openKeys = latestOpenKey ? [latestOpenKey] : [];\n        },\n        bindBreakpoint(value) {\n            this.$emit(\"input\", value);\n        }\n    },\n    watch: {\n        $route(value) {\n            this.selectedKeys = [value.path];\n        },\n        value(value) {\n            this.localValue = value;\n        }\n    }\n}\n",{"version":3,"sources":["Sidebar.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAgBA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Sidebar.vue","sourceRoot":"src/layouts/sidebar","sourcesContent":["<template>\n    <a-layout-sider class=\"layout-sidebar\"\n                    collapsible\n                    v-model=\"localValue\"\n                    :width=\"width\"\n                    :collapsedWidth=\"collapsedWidth\"\n                    :trigger=\"null\"\n                    :style=\"styles\"\n                    breakpoint=\"lg\"\n                    @breakpoint=\"bindBreakpoint\">\n        <Brand/>\n        <Menu/>\n    </a-layout-sider>\n</template>\n\n<script>\n    import Brand from \"@/layouts/brand/Brand\";\n    import Menu from \"@/layouts/menu/Menu\";\n    import {mapState} from 'vuex';\n\n    let routers = [],\n        rootSubmenuKeys = ['/dashboard', '/system', '/account'],\n        localValue = false,\n        inlineCollapsed = true;\n\n    export default {\n        name: \"Sidebar\",\n        components: {Brand, Menu},\n        props: {\n            value: {\n                type: Boolean,\n                default: false\n            },\n            width: {\n                type: [String, Number],\n                default: 256\n            },\n            collapsedWidth: {\n                type: [String, Number],\n                width: 128\n            }\n        },\n        data() {\n            return {\n                localValue,\n                routers,\n                inlineCollapsed,\n                openKeys: [],\n                selectedKeys: [''],\n                rootSubmenuKeys,\n            }\n        },\n        computed: {\n            ...mapState({\n                theme: state => state.setting.theme\n            }),\n            styles() {\n                return {\n                    background: this.theme.themeStyle === 'light' ? 'white' : ''\n                }\n            }\n        },\n        mounted() {\n            this.openKeys = [this.$route.matched[1].path];\n            this.selectedKeys = [this.$route.path];\n            this.routers = this.$storage.get('ROUTER');\n        },\n        methods: {\n            bindClickMenu(ev) {\n                const key = ev.key;\n                if (this.selectedKeys.indexOf(key) > -1) return;\n\n                this.selectedKeys = [key];\n                this.$router.push(key);\n            },\n            bindOpenChange(openKeys) {\n                const latestOpenKey = openKeys.find(key => this.openKeys.indexOf(key) === -1);\n                if (this.rootSubmenuKeys.indexOf(latestOpenKey) === -1) this.openKeys = openKeys;\n                else this.openKeys = latestOpenKey ? [latestOpenKey] : [];\n            },\n            bindBreakpoint(value) {\n                this.$emit(\"input\", value);\n            }\n        },\n        watch: {\n            $route(value) {\n                this.selectedKeys = [value.path];\n            },\n            value(value) {\n                this.localValue = value;\n            }\n        }\n    }\n</script>\n"]}]}