{"remainingRequest":"/Users/rige/Desktop/Workbench/github/rms/rms_web_vue/node_modules/_vue-loader@15.7.1@vue-loader/lib/index.js??vue-loader-options!/Users/rige/Desktop/Workbench/github/rms/rms_web_vue/src/components/LoadingBar/LoadingBar.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/rige/Desktop/Workbench/github/rms/rms_web_vue/src/components/LoadingBar/LoadingBar.vue","mtime":1568663656000},{"path":"/Users/rige/Desktop/Workbench/github/rms/rms_web_vue/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/rige/Desktop/Workbench/github/rms/rms_web_vue/node_modules/_babel-loader@8.0.6@babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/rige/Desktop/Workbench/github/rms/rms_web_vue/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/rige/Desktop/Workbench/github/rms/rms_web_vue/node_modules/_vue-loader@15.7.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n\nexport default {\n    name: \"LoadingBar\",\n    props: {\n        color: {\n            type: String,\n            default: 'primary'\n        },\n        failedColor: {\n            type: String,\n            default: 'error'\n        },\n        height: {\n            type: [String, Number],\n            default: 2\n        }\n    },\n    data() {\n        return {\n            percent: 0,\n            status: \"success\",\n            show: false\n        }\n    },\n    computed: {\n        innerClasses() {\n            return [\n                `loading-bar-inner`,\n                {\n                    [`loading-bar-inner-color-primary`]: this.color === 'primary' && this.status === 'success',\n                    [`loading-bar-inner-failed-color-error`]: this.failedColor === 'error' && this.status === 'error'\n                }\n            ]\n        },\n        styles() {\n            return {\n                height: `${this.height}px`\n            }\n        },\n        innerStyles() {\n            let style = {\n                width: `${this.percent}%`,\n                height: `${this.height}px`\n            };\n\n            if (this.color !== 'primary' && this.status === 'success') {\n                style.backgroundColor = this.color;\n            }\n\n            if (this.failedColor !== 'error' && this.status === 'error') {\n                style.backgroundColor = this.failedColor;\n            }\n\n            return style;\n        }\n    }\n}\n",{"version":3,"sources":["LoadingBar.vue"],"names":[],"mappings":";;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"LoadingBar.vue","sourceRoot":"src/components/LoadingBar","sourcesContent":["<template>\n    <div class=\"loading-bar\" :style=\"styles\" v-show=\"show\">\n        <div :class=\"innerClasses\" :style=\"innerStyles\"></div>\n    </div>\n</template>\n\n<script>\n    export default {\n        name: \"LoadingBar\",\n        props: {\n            color: {\n                type: String,\n                default: 'primary'\n            },\n            failedColor: {\n                type: String,\n                default: 'error'\n            },\n            height: {\n                type: [String, Number],\n                default: 2\n            }\n        },\n        data() {\n            return {\n                percent: 0,\n                status: \"success\",\n                show: false\n            }\n        },\n        computed: {\n            innerClasses() {\n                return [\n                    `loading-bar-inner`,\n                    {\n                        [`loading-bar-inner-color-primary`]: this.color === 'primary' && this.status === 'success',\n                        [`loading-bar-inner-failed-color-error`]: this.failedColor === 'error' && this.status === 'error'\n                    }\n                ]\n            },\n            styles() {\n                return {\n                    height: `${this.height}px`\n                }\n            },\n            innerStyles() {\n                let style = {\n                    width: `${this.percent}%`,\n                    height: `${this.height}px`\n                };\n\n                if (this.color !== 'primary' && this.status === 'success') {\n                    style.backgroundColor = this.color;\n                }\n\n                if (this.failedColor !== 'error' && this.status === 'error') {\n                    style.backgroundColor = this.failedColor;\n                }\n\n                return style;\n            }\n        }\n    }\n</script>\n"]}]}