{"remainingRequest":"/Users/rige/Desktop/Workbench/github/rms/rms_web_vue/node_modules/_thread-loader@2.1.3@thread-loader/dist/cjs.js!/Users/rige/Desktop/Workbench/github/rms/rms_web_vue/node_modules/_babel-loader@8.0.6@babel-loader/lib/index.js!/Users/rige/Desktop/Workbench/github/rms/rms_web_vue/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js??ref--0-0!/Users/rige/Desktop/Workbench/github/rms/rms_web_vue/node_modules/_vue-loader@15.7.1@vue-loader/lib/index.js??vue-loader-options!/Users/rige/Desktop/Workbench/github/rms/rms_web_vue/src/components/Chart/Chart.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/rige/Desktop/Workbench/github/rms/rms_web_vue/src/components/Chart/Chart.vue","mtime":1568786877457},{"path":"/Users/rige/Desktop/Workbench/github/rms/rms_web_vue/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/rige/Desktop/Workbench/github/rms/rms_web_vue/node_modules/_thread-loader@2.1.3@thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/rige/Desktop/Workbench/github/rms/rms_web_vue/node_modules/_babel-loader@8.0.6@babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/rige/Desktop/Workbench/github/rms/rms_web_vue/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/rige/Desktop/Workbench/github/rms/rms_web_vue/node_modules/_vue-loader@15.7.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport _defineProperty from \"/Users/rige/Desktop/Workbench/github/rms/rms_web_vue/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\nimport G2 from '@antv/g2';\nimport { ComponentUtil } from '@/utils';\nvar barTypes = ['line', 'bar', 'area', 'pie', 'ring'],\n    padding = [16, 16, 32, 40],\n    simplePadding = [4, 0, 0, 0];\nexport default {\n  name: \"Chart\",\n  props: {\n    group: {\n      type: Boolean,\n      default: false\n    },\n    simple: {\n      type: Boolean,\n      default: false\n    },\n    x: {\n      type: String\n    },\n    y: {\n      type: String\n    },\n    dataSource: {\n      type: Array,\n      required: true,\n      default: function _default() {\n        return [];\n      }\n    },\n    minValue: {\n      type: Number\n    },\n    maxValue: {\n      type: Number\n    },\n    name: {\n      type: String\n    },\n    color: {\n      type: Array,\n      default: function _default() {\n        return ['#1890ff', '#d1e9ff', '#ced4d9', '#f0f2f3'];\n      }\n    },\n    forceFit: {\n      type: Boolean,\n      default: true\n    },\n    animate: {\n      type: Boolean,\n      default: true\n    },\n    theme: {\n      type: String,\n      default: 'default'\n    },\n    width: {\n      type: [Number, String],\n      default: '100%'\n    },\n    height: {\n      type: [Number, String],\n      default: 256\n    },\n    padding: {\n      type: [Number, Array],\n      default: function _default() {\n        return padding;\n      }\n    },\n    type: {\n      type: String,\n      required: true,\n      validator: function validator(value) {\n        return ComponentUtil.isExist(value, barTypes);\n      }\n    }\n  },\n  data: function data() {\n    return {\n      chart: null\n    };\n  },\n  mounted: function mounted() {\n    this.render();\n  },\n  methods: {\n    getChart: function getChart() {\n      var chart = new G2.Chart({\n        container: this.$refs.chart,\n        forceFit: this.forceFit,\n        height: this.height,\n        padding: this.simple ? simplePadding : this.padding,\n        theme: this.theme,\n        animate: this.animate\n      });\n      chart.source(this.dataSource);\n      if (this.simple) chart.axis(false);else chart.axis(\"\".concat(this.y), {\n        label: {\n          formatter: function formatter(value) {\n            if (value > 10000) return (value / 1000).toFixed(0) + 'k';else return value;\n          }\n        }\n      });\n      this.chart = chart;\n      return chart;\n    },\n    render: function render() {\n      switch (this.type) {\n        case 'line':\n          break;\n\n        case 'bar':\n          this.renderBarChart();\n          break;\n\n        case 'area':\n          this.renderAreaChart();\n          break;\n\n        case 'pie':\n          break;\n\n        case 'ring':\n          this.renderRingChart();\n          break;\n\n        default:\n          break;\n      }\n    },\n    renderAreaChart: function renderAreaChart() {\n      var _chart$scale;\n\n      var chart = this.getChart();\n      chart.scale((_chart$scale = {}, _defineProperty(_chart$scale, \"\".concat(this.y), {\n        min: this.minValue,\n        max: this.maxValue\n      }), _defineProperty(_chart$scale, \"\".concat(this.x), {\n        range: [0, 1]\n      }), _chart$scale));\n      chart.area().position(\"\".concat(this.x, \"*\").concat(this.y)).shape('smooth').color('#975fe4');\n      chart.line().position(\"\".concat(this.x, \"*\").concat(this.y)).shape('smooth').color('#975fe4');\n      chart.render();\n    },\n    renderBarChart: function renderBarChart() {\n      var chart = this.getChart();\n      if (this.group) chart.interval().position(\"\".concat(this.x, \"*\").concat(this.y)).color(this.name, this.color).adjust([{\n        type: 'dodge',\n        marginRatio: 1 / 32\n      }]);else chart.interval().position(\"\".concat(this.x, \"*\").concat(this.y));\n      chart.render();\n    },\n    renderRingChart: function renderRingChart() {\n      var chart = this.getChart();\n      chart.coord('theta', {\n        radius: 1,\n        innerRadius: 0.7\n      });\n      chart.legend('item', {\n        position: 'right-center'\n      });\n      chart.tooltip({\n        showTitle: false,\n        itemTpl: '<li><span style=\"background-color:{color};\" class=\"g2-tooltip-marker\"></span>{name}: {value}</li>'\n      }); //  辅助文本\n\n      chart.guide().html({\n        position: ['50%', '50%'],\n        html: \"\\n                    <div style=\\\"color:#8c8c8c;font-size: 14px;text-align: center;\\\">\\n                        \\u9500\\u552E\\u989D\\n                        <br>\\n                        <span style=\\\"font-size:24px\\\">\\xA5 15,781</span>\\n                    </div>\\n                \",\n        alignX: 'middle',\n        alignY: 'middle'\n      });\n      chart.intervalStack().position('percent').color('item').tooltip('item*percent', function (item, percent) {\n        percent = percent * 100 + '%';\n        return {\n          name: item,\n          value: percent\n        };\n      }).style({\n        lineWidth: 4,\n        stroke: '#fff'\n      });\n      chart.render();\n    }\n  },\n  watch: {\n    x: function x() {\n      this.chart.render();\n    },\n    y: function y() {\n      this.chart.render();\n    },\n    dataSource: {\n      handler: function handler() {\n        // 重绘图表\n        this.chart.repaint();\n      },\n      deep: true\n    },\n    color: function color() {\n      this.chart.render();\n    },\n    name: function name() {\n      this.chart.render();\n    }\n  }\n};",{"version":3,"sources":["Chart.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div ref=\"chart\" class=\"chart\"/>\n</template>\n\n<script>\n    import G2 from '@antv/g2';\n    import {ComponentUtil} from '@/utils';\n\n    let barTypes = ['line', 'bar', 'area', 'pie', 'ring'],\n        padding = [16, 16, 32, 40],\n        simplePadding = [4, 0, 0, 0];\n\n    export default {\n        name: \"Chart\",\n        props: {\n            group: {\n                type: Boolean,\n                default: false\n            },\n            simple: {\n                type: Boolean,\n                default: false\n            },\n            x: {\n                type: String\n            },\n            y: {\n                type: String\n            },\n            dataSource: {\n                type: Array,\n                required: true,\n                default() {\n                    return [];\n                }\n            },\n            minValue: {\n                type: Number\n            },\n            maxValue: {\n                type: Number\n            },\n            name: {\n                type: String,\n            },\n            color: {\n                type: Array,\n                default() {\n                    return ['#1890ff', '#d1e9ff', '#ced4d9', '#f0f2f3'];\n                }\n            },\n            forceFit: {\n                type: Boolean,\n                default: true\n            },\n            animate: {\n                type: Boolean,\n                default: true\n            },\n            theme: {\n                type: String,\n                default: 'default'\n            },\n            width: {\n                type: [Number, String],\n                default: '100%'\n            },\n            height: {\n                type: [Number, String],\n                default: 256\n            },\n            padding: {\n                type: [Number, Array],\n                default() {\n                    return padding;\n                }\n            },\n            type: {\n                type: String,\n                required: true,\n                validator(value) {\n                    return ComponentUtil.isExist(value, barTypes)\n                }\n            }\n        },\n        data() {\n            return {\n                chart: null\n            }\n        },\n        mounted() {\n            this.render();\n        },\n        methods: {\n            getChart() {\n                let chart = new G2.Chart({\n                    container: this.$refs.chart,\n                    forceFit: this.forceFit,\n                    height: this.height,\n                    padding: this.simple ? simplePadding : this.padding,\n                    theme: this.theme,\n                    animate: this.animate\n                });\n\n                chart.source(this.dataSource);\n\n                if (this.simple) chart.axis(false);\n                else chart.axis(`${this.y}`, {\n                    label: {\n                        formatter: (value) => {\n                            if (value > 10000) return (value / 1000).toFixed(0) + 'k';\n                            else return value;\n                        }\n                    }\n                });\n\n                this.chart = chart;\n                return chart;\n            },\n            render() {\n                switch (this.type) {\n                    case 'line':\n                        break;\n                    case 'bar':\n                        this.renderBarChart();\n                        break;\n                    case 'area':\n                        this.renderAreaChart();\n                        break;\n                    case 'pie':\n                        break;\n                    case 'ring':\n                        this.renderRingChart();\n                        break;\n                    default:\n                        break;\n                }\n            },\n            renderAreaChart() {\n                let chart = this.getChart();\n                chart.scale({\n                    [`${this.y}`]: {\n                        min: this.minValue,\n                        max: this.maxValue\n                    },\n                    [`${this.x}`]: {\n                        range: [0, 1]\n                    }\n                });\n                chart.area().position(`${this.x}*${this.y}`).shape('smooth').color('#975fe4');\n                chart.line().position(`${this.x}*${this.y}`).shape('smooth').color('#975fe4');\n                chart.render();\n            },\n            renderBarChart() {\n                let chart = this.getChart();\n                if (this.group) chart.interval().position(`${this.x}*${this.y}`).color(this.name,this.color).adjust([{\n                    type: 'dodge',\n                    marginRatio: 1 / 32\n                }]);\n                else chart.interval().position(`${this.x}*${this.y}`);\n                chart.render();\n            },\n            renderRingChart() {\n                let chart = this.getChart();\n\n                chart.coord('theta', {\n                    radius: 1,\n                    innerRadius: 0.7\n                });\n                chart.legend('item', {\n                    position: 'right-center',\n                });\n                chart.tooltip({\n                    showTitle: false,\n                    itemTpl: '<li><span style=\"background-color:{color};\" class=\"g2-tooltip-marker\"></span>{name}: {value}</li>'\n                });\n                //  辅助文本\n                chart.guide().html({\n                    position: ['50%', '50%'],\n                    html: `\n                        <div style=\"color:#8c8c8c;font-size: 14px;text-align: center;\">\n                            销售额\n                            <br>\n                            <span style=\"font-size:24px\">¥ 15,781</span>\n                        </div>\n                    `,\n                    alignX: 'middle',\n                    alignY: 'middle'\n                });\n\n                chart.intervalStack().position('percent').color('item')\n                    .tooltip('item*percent', (item, percent) => {\n                        percent = percent * 100 + '%';\n                        return {\n                            name: item,\n                            value: percent\n                        };\n                    })\n                    .style({\n                        lineWidth: 4,\n                        stroke: '#fff'\n                    });\n                chart.render();\n            }\n        },\n        watch: {\n            x() {\n                this.chart.render();\n            },\n            y() {\n                this.chart.render();\n            },\n            dataSource: {\n                handler() {\n                    // 重绘图表\n                    this.chart.repaint();\n                },\n                deep: true\n            },\n            color() {\n                this.chart.render();\n            },\n            name() {\n                this.chart.render();\n            },\n        }\n    }\n</script>\n"],"sourceRoot":"src/components/Chart"}]}