{"remainingRequest":"/Users/rige/Desktop/Workbench/github/rms/rms_web_vue/node_modules/_babel-loader@8.0.6@babel-loader/lib/index.js!/Users/rige/Desktop/Workbench/github/rms/rms_web_vue/node_modules/_eslint-loader@2.2.1@eslint-loader/index.js??ref--13-0!/Users/rige/Desktop/Workbench/github/rms/rms_web_vue/src/api/modules/Server.js","dependencies":[{"path":"/Users/rige/Desktop/Workbench/github/rms/rms_web_vue/src/api/modules/Server.js","mtime":1571215782302},{"path":"/Users/rige/Desktop/Workbench/github/rms/rms_web_vue/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/rige/Desktop/Workbench/github/rms/rms_web_vue/node_modules/_babel-loader@8.0.6@babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/rige/Desktop/Workbench/github/rms/rms_web_vue/node_modules/_eslint-loader@2.2.1@eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/rige/Desktop/Workbench/github/rms/rms_web_vue/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { RequestUtil } from \"@/utils\";\nvar systemInfo = {};\nvar jvmInfo = {};\nvar tomcatInfo = {};\nvar basePath = '/actuator/metrics';\nexport default {\n  getSystemInfoSync: function () {\n    var _getSystemInfoSync = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee() {\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return this.getInfo(\"\".concat(basePath, \"/system.cpu.usage\")).then(function (value) {\n                systemInfo.cpu_usage = value;\n              });\n\n            case 2:\n              _context.next = 4;\n              return this.getInfo(\"\".concat(basePath, \"/system.cpu.count\")).then(function (value) {\n                systemInfo.cpu_count = value;\n              });\n\n            case 4:\n              _context.next = 6;\n              return this.getInfo(\"\".concat(basePath, \"/process.start.time\")).then(function (value) {\n                systemInfo.process_start_time = new Date(+value * 1000).toFormatString();\n              });\n\n            case 6:\n              _context.next = 8;\n              return this.getInfo(\"\".concat(basePath, \"/process.uptime\")).then(function (value) {\n                systemInfo.process_runtime = value;\n              });\n\n            case 8:\n              return _context.abrupt(\"return\", systemInfo);\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function getSystemInfoSync() {\n      return _getSystemInfoSync.apply(this, arguments);\n    }\n\n    return getSystemInfoSync;\n  }(),\n  getJVMInfoSync: function () {\n    var _getJVMInfoSync = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee2() {\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return this.getInfo(\"\".concat(basePath, \"/jvm.memory.max\")).then(function (value) {\n                jvmInfo.memory_max = value;\n              });\n\n            case 2:\n              _context2.next = 4;\n              return this.getInfo(\"\".concat(basePath, \"/jvm.memory.committed\")).then(function (value) {\n                jvmInfo.memory_committed = value;\n              });\n\n            case 4:\n              _context2.next = 6;\n              return this.getInfo(\"\".concat(basePath, \"/jvm.memory.used\")).then(function (value) {\n                jvmInfo.memory_used = value;\n              });\n\n            case 6:\n              jvmInfo.memory_usage = Number(jvmInfo.memory_used / jvmInfo.memory_max).toPercentage();\n              return _context2.abrupt(\"return\", jvmInfo);\n\n            case 8:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function getJVMInfoSync() {\n      return _getJVMInfoSync.apply(this, arguments);\n    }\n\n    return getJVMInfoSync;\n  }(),\n  getTomcatInfoSync: function () {\n    var _getTomcatInfoSync = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee3() {\n      return regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return this.getInfo(\"\".concat(basePath, \"/tomcat.global.request\")).then(function (value) {\n                tomcatInfo.global_request_count = value[0].value;\n                tomcatInfo.global_request_total_time = value[1].value;\n              });\n\n            case 2:\n              return _context3.abrupt(\"return\", tomcatInfo);\n\n            case 3:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n\n    function getTomcatInfoSync() {\n      return _getTomcatInfoSync.apply(this, arguments);\n    }\n\n    return getTomcatInfoSync;\n  }(),\n  getInfo: function getInfo(path) {\n    return RequestUtil.get(path).then(function (res) {\n      if (res.status === 200) {\n        var measurements = res.data.measurements;\n        if (measurements.length === 1) return res.data.measurements[0].value;else return res.data.measurements;\n      } else return \"未知\";\n    });\n  }\n};",{"version":3,"sources":["/Users/rige/Desktop/Workbench/github/rms/rms_web_vue/src/api/modules/Server.js"],"names":["RequestUtil","systemInfo","jvmInfo","tomcatInfo","basePath","getSystemInfoSync","getInfo","then","value","cpu_usage","cpu_count","process_start_time","Date","toFormatString","process_runtime","getJVMInfoSync","memory_max","memory_committed","memory_used","memory_usage","Number","toPercentage","getTomcatInfoSync","global_request_count","global_request_total_time","path","get","res","status","measurements","data","length"],"mappings":"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","sourcesContent":["import {RequestUtil} from \"@/utils\";\n\nlet systemInfo = {};\nlet jvmInfo = {};\nlet tomcatInfo = {};\nlet basePath = '/actuator/metrics';\n\n\nexport default {\n    async getSystemInfoSync() {\n        await this.getInfo(`${basePath}/system.cpu.usage`).then(value => {\n            systemInfo.cpu_usage = value;\n        });\n        await this.getInfo(`${basePath}/system.cpu.count`).then(value => {\n            systemInfo.cpu_count = value;\n        });\n        await this.getInfo(`${basePath}/process.start.time`).then(value => {\n            systemInfo.process_start_time = new Date(+value * 1000).toFormatString();\n        });\n        await this.getInfo(`${basePath}/process.uptime`).then(value => {\n            systemInfo.process_runtime = value;\n        });\n\n        return systemInfo;\n    },\n\n    async getJVMInfoSync() {\n        await this.getInfo(`${basePath}/jvm.memory.max`).then(value => {\n            jvmInfo.memory_max = value;\n        });\n        await this.getInfo(`${basePath}/jvm.memory.committed`).then(value => {\n            jvmInfo.memory_committed = value;\n        });\n        await this.getInfo(`${basePath}/jvm.memory.used`).then(value => {\n            jvmInfo.memory_used = value;\n        });\n\n        jvmInfo.memory_usage = Number(jvmInfo.memory_used / jvmInfo.memory_max).toPercentage();\n\n        return jvmInfo;\n    },\n\n    async getTomcatInfoSync() {\n        await this.getInfo(`${basePath}/tomcat.global.request`).then(value => {\n            tomcatInfo.global_request_count = value[0].value;\n            tomcatInfo.global_request_total_time = value[1].value;\n        });\n\n        return tomcatInfo;\n    },\n\n    getInfo(path) {\n        return RequestUtil.get(path).then(res => {\n            if (res.status === 200) {\n                const measurements = res.data.measurements;\n                if (measurements.length === 1) return res.data.measurements[0].value;\n                else return res.data.measurements;\n            } else return \"未知\";\n        })\n    },\n}\n"]}]}