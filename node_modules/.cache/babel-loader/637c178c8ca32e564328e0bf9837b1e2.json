{"remainingRequest":"/Users/rige/Desktop/Workbench/github/rms/rms_web_vue/node_modules/_babel-loader@8.0.6@babel-loader/lib/index.js!/Users/rige/Desktop/Workbench/github/rms/rms_web_vue/node_modules/_eslint-loader@2.2.1@eslint-loader/index.js??ref--13-0!/Users/rige/Desktop/Workbench/github/rms/rms_web_vue/src/common/prototype/Number.js","dependencies":[{"path":"/Users/rige/Desktop/Workbench/github/rms/rms_web_vue/src/common/prototype/Number.js","mtime":1568663656000},{"path":"/Users/rige/Desktop/Workbench/github/rms/rms_web_vue/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/rige/Desktop/Workbench/github/rms/rms_web_vue/node_modules/_babel-loader@8.0.6@babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/rige/Desktop/Workbench/github/rms/rms_web_vue/node_modules/_eslint-loader@2.2.1@eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\n\nNumber.prototype.toPercentage = function () {\n  var fixed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;\n  if (this > 1) console.error(\"Error: Integer \".concat(this, \" cannot be converted to a percentage\"));else if (this === 1) return '100%';else return \"\".concat(Number(this * 100).toFixed(fixed), \"%\");\n};\n\nexport default Number;",{"version":3,"sources":["/Users/rige/Desktop/Workbench/github/rms/rms_web_vue/src/common/prototype/Number.js"],"names":["Number","prototype","toPercentage","fixed","console","error","toFixed"],"mappings":";;AAAAA,MAAM,CAACC,SAAP,CAAiBC,YAAjB,GAAgC,YAAqB;AAAA,MAAXC,KAAW,uEAAH,CAAG;AACjD,MAAI,OAAO,CAAX,EAAcC,OAAO,CAACC,KAAR,0BAAgC,IAAhC,2CAAd,KACK,IAAI,SAAS,CAAb,EAAgB,OAAO,MAAP,CAAhB,KACA,iBAAUL,MAAM,CAAC,OAAO,GAAR,CAAN,CAAmBM,OAAnB,CAA2BH,KAA3B,CAAV;AACR,CAJD;;AAMA,eAAeH,MAAf","sourcesContent":["Number.prototype.toPercentage = function (fixed = 2) {\n    if (this > 1) console.error(`Error: Integer ${this} cannot be converted to a percentage`);\n    else if (this === 1) return '100%';\n    else return `${Number(this * 100).toFixed(fixed)}%`;\n};\n\nexport default Number;\n"]}]}